/*
 * This file is generated by jOOQ.
 */
package org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.Heroesdeskschema;
import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.Keys;
import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables.records.TaskUserRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskUser extends TableImpl<TaskUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>heroesdeskschema.Task_User</code>
     */
    public static final TaskUser TASK_USER = new TaskUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskUserRecord> getRecordType() {
        return TaskUserRecord.class;
    }

    /**
     * The column <code>heroesdeskschema.Task_User.task_id</code>.
     */
    public final TableField<TaskUserRecord, String> TASK_ID = createField(DSL.name("task_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>heroesdeskschema.Task_User.user_id</code>.
     */
    public final TableField<TaskUserRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private TaskUser(Name alias, Table<TaskUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskUser(Name alias, Table<TaskUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>heroesdeskschema.Task_User</code> table reference
     */
    public TaskUser(String alias) {
        this(DSL.name(alias), TASK_USER);
    }

    /**
     * Create an aliased <code>heroesdeskschema.Task_User</code> table reference
     */
    public TaskUser(Name alias) {
        this(alias, TASK_USER);
    }

    /**
     * Create a <code>heroesdeskschema.Task_User</code> table reference
     */
    public TaskUser() {
        this(DSL.name("Task_User"), null);
    }

    public <O extends Record> TaskUser(Table<O> child, ForeignKey<O, TaskUserRecord> key) {
        super(child, key, TASK_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Heroesdeskschema.HEROESDESKSCHEMA;
    }

    @Override
    public UniqueKey<TaskUserRecord> getPrimaryKey() {
        return Keys.PK_TASK_USER;
    }

    @Override
    public List<ForeignKey<TaskUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK_USER__FK_TASK);
    }

    private transient Task _task;

    /**
     * Get the implicit join path to the <code>heroesdeskschema.Task</code>
     * table.
     */
    public Task task() {
        if (_task == null)
            _task = new Task(this, Keys.TASK_USER__FK_TASK);

        return _task;
    }

    @Override
    public TaskUser as(String alias) {
        return new TaskUser(DSL.name(alias), this);
    }

    @Override
    public TaskUser as(Name alias) {
        return new TaskUser(alias, this);
    }

    @Override
    public TaskUser as(Table<?> alias) {
        return new TaskUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskUser rename(String name) {
        return new TaskUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskUser rename(Name name) {
        return new TaskUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskUser rename(Table<?> name) {
        return new TaskUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
