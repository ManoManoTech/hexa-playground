/*
 * This file is generated by jOOQ.
 */
package org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables.records;


import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables.TaskUser;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskUserRecord extends UpdatableRecordImpl<TaskUserRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>heroesdeskschema.Task_User.task_id</code>.
     */
    public void setTaskId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>heroesdeskschema.Task_User.task_id</code>.
     */
    public String getTaskId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>heroesdeskschema.Task_User.user_id</code>.
     */
    public void setUserId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>heroesdeskschema.Task_User.user_id</code>.
     */
    public String getUserId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return TaskUser.TASK_USER.TASK_ID;
    }

    @Override
    public Field<String> field2() {
        return TaskUser.TASK_USER.USER_ID;
    }

    @Override
    public String component1() {
        return getTaskId();
    }

    @Override
    public String component2() {
        return getUserId();
    }

    @Override
    public String value1() {
        return getTaskId();
    }

    @Override
    public String value2() {
        return getUserId();
    }

    @Override
    public TaskUserRecord value1(String value) {
        setTaskId(value);
        return this;
    }

    @Override
    public TaskUserRecord value2(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public TaskUserRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TaskUserRecord
     */
    public TaskUserRecord() {
        super(TaskUser.TASK_USER);
    }

    /**
     * Create a detached, initialised TaskUserRecord
     */
    public TaskUserRecord(String taskId, String userId) {
        super(TaskUser.TASK_USER);

        setTaskId(taskId);
        setUserId(userId);
        resetChangedOnNotNull();
    }
}
