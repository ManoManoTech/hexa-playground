/*
 * This file is generated by jOOQ.
 */
package org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.Heroesdeskschema;
import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.Keys;
import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables.records.MissionUserRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MissionUser extends TableImpl<MissionUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>heroesdeskschema.Mission_User</code>
     */
    public static final MissionUser MISSION_USER = new MissionUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MissionUserRecord> getRecordType() {
        return MissionUserRecord.class;
    }

    /**
     * The column <code>heroesdeskschema.Mission_User.mission_id</code>.
     */
    public final TableField<MissionUserRecord, String> MISSION_ID = createField(DSL.name("mission_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>heroesdeskschema.Mission_User.user_id</code>.
     */
    public final TableField<MissionUserRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private MissionUser(Name alias, Table<MissionUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private MissionUser(Name alias, Table<MissionUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>heroesdeskschema.Mission_User</code> table
     * reference
     */
    public MissionUser(String alias) {
        this(DSL.name(alias), MISSION_USER);
    }

    /**
     * Create an aliased <code>heroesdeskschema.Mission_User</code> table
     * reference
     */
    public MissionUser(Name alias) {
        this(alias, MISSION_USER);
    }

    /**
     * Create a <code>heroesdeskschema.Mission_User</code> table reference
     */
    public MissionUser() {
        this(DSL.name("Mission_User"), null);
    }

    public <O extends Record> MissionUser(Table<O> child, ForeignKey<O, MissionUserRecord> key) {
        super(child, key, MISSION_USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Heroesdeskschema.HEROESDESKSCHEMA;
    }

    @Override
    public UniqueKey<MissionUserRecord> getPrimaryKey() {
        return Keys.PK_MISSION_USER;
    }

    @Override
    public List<ForeignKey<MissionUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MISSION_USER__FK_MISSION);
    }

    private transient Mission _mission;

    /**
     * Get the implicit join path to the <code>heroesdeskschema.Mission</code>
     * table.
     */
    public Mission mission() {
        if (_mission == null)
            _mission = new Mission(this, Keys.MISSION_USER__FK_MISSION);

        return _mission;
    }

    @Override
    public MissionUser as(String alias) {
        return new MissionUser(DSL.name(alias), this);
    }

    @Override
    public MissionUser as(Name alias) {
        return new MissionUser(alias, this);
    }

    @Override
    public MissionUser as(Table<?> alias) {
        return new MissionUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MissionUser rename(String name) {
        return new MissionUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MissionUser rename(Name name) {
        return new MissionUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MissionUser rename(Table<?> name) {
        return new MissionUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
