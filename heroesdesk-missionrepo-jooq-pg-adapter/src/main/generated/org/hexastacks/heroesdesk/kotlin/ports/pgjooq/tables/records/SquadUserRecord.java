/*
 * This file is generated by jOOQ.
 */
package org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables.records;


import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables.SquadUser;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SquadUserRecord extends UpdatableRecordImpl<SquadUserRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>heroesdeskschema.Squad_User.squad_key</code>.
     */
    public void setSquadKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>heroesdeskschema.Squad_User.squad_key</code>.
     */
    public String getSquadKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>heroesdeskschema.Squad_User.user_id</code>.
     */
    public void setUserId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>heroesdeskschema.Squad_User.user_id</code>.
     */
    public String getUserId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SquadUser.SQUAD_USER.SQUAD_KEY;
    }

    @Override
    public Field<String> field2() {
        return SquadUser.SQUAD_USER.USER_ID;
    }

    @Override
    public String component1() {
        return getSquadKey();
    }

    @Override
    public String component2() {
        return getUserId();
    }

    @Override
    public String value1() {
        return getSquadKey();
    }

    @Override
    public String value2() {
        return getUserId();
    }

    @Override
    public SquadUserRecord value1(String value) {
        setSquadKey(value);
        return this;
    }

    @Override
    public SquadUserRecord value2(String value) {
        setUserId(value);
        return this;
    }

    @Override
    public SquadUserRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SquadUserRecord
     */
    public SquadUserRecord() {
        super(SquadUser.SQUAD_USER);
    }

    /**
     * Create a detached, initialised SquadUserRecord
     */
    public SquadUserRecord(String squadKey, String userId) {
        super(SquadUser.SQUAD_USER);

        setSquadKey(squadKey);
        setUserId(userId);
        resetChangedOnNotNull();
    }
}
