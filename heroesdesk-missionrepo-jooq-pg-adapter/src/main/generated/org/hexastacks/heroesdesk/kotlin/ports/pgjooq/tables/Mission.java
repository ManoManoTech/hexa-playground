/*
 * This file is generated by jOOQ.
 */
package org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.Heroesdeskschema;
import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.Keys;
import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.enums.Missionstatus;
import org.hexastacks.heroesdesk.kotlin.ports.pgjooq.tables.records.MissionRecord;
import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Mission extends TableImpl<MissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>heroesdeskschema.Mission</code>
     */
    public static final Mission MISSION = new Mission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MissionRecord> getRecordType() {
        return MissionRecord.class;
    }

    /**
     * The column <code>heroesdeskschema.Mission.id</code>.
     */
    public final TableField<MissionRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>heroesdeskschema.Mission.squad_key</code>.
     */
    public final TableField<MissionRecord, String> SQUAD_KEY = createField(DSL.name("squad_key"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>heroesdeskschema.Mission.title</code>.
     */
    public final TableField<MissionRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>heroesdeskschema.Mission.description</code>.
     */
    public final TableField<MissionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1024).nullable(false).defaultValue(DSL.field(DSL.raw("''::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>heroesdeskschema.Mission.status</code>.
     */
    public final TableField<MissionRecord, Missionstatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'Pending'::heroesdeskschema.missionstatus"), SQLDataType.VARCHAR)).asEnumDataType(org.hexastacks.heroesdesk.kotlin.ports.pgjooq.enums.Missionstatus.class), this, "");

    private Mission(Name alias, Table<MissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Mission(Name alias, Table<MissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>heroesdeskschema.Mission</code> table reference
     */
    public Mission(String alias) {
        this(DSL.name(alias), MISSION);
    }

    /**
     * Create an aliased <code>heroesdeskschema.Mission</code> table reference
     */
    public Mission(Name alias) {
        this(alias, MISSION);
    }

    /**
     * Create a <code>heroesdeskschema.Mission</code> table reference
     */
    public Mission() {
        this(DSL.name("Mission"), null);
    }

    public <O extends Record> Mission(Table<O> child, ForeignKey<O, MissionRecord> key) {
        super(child, key, MISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Heroesdeskschema.HEROESDESKSCHEMA;
    }

    @Override
    public UniqueKey<MissionRecord> getPrimaryKey() {
        return Keys.PK_MISSION;
    }

    @Override
    public List<ForeignKey<MissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MISSION__FK_SQUAD_KEY);
    }

    private transient Squad _squad;

    /**
     * Get the implicit join path to the <code>heroesdeskschema.Squad</code>
     * table.
     */
    public Squad squad() {
        if (_squad == null)
            _squad = new Squad(this, Keys.MISSION__FK_SQUAD_KEY);

        return _squad;
    }

    @Override
    public List<Check<MissionRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("CHK_description_MIN_LENGTH"), "((char_length('title'::text) >= 0))", true),
            Internal.createCheck(this, DSL.name("CHK_id_MIN_LENGTH"), "((char_length('id'::text) >= 1))", true),
            Internal.createCheck(this, DSL.name("CHK_title_MIN_LENGTH"), "((char_length('title'::text) >= 1))", true)
        );
    }

    @Override
    public Mission as(String alias) {
        return new Mission(DSL.name(alias), this);
    }

    @Override
    public Mission as(Name alias) {
        return new Mission(alias, this);
    }

    @Override
    public Mission as(Table<?> alias) {
        return new Mission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Mission rename(String name) {
        return new Mission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mission rename(Name name) {
        return new Mission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Mission rename(Table<?> name) {
        return new Mission(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, Missionstatus> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super Missionstatus, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super Missionstatus, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
